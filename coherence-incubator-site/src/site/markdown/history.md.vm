History
-------

The following sections outline Oracle Coherence Incubator changes in 
reverse chronological order.

<h3>Version ${project.version} built on ${timestamp} </h3>


<h4>Source and Documentation Contributors</h4>

*   Luk Ho, Patrick Fry

<h4>Global and Cross-Module Changes</h4>

*   No Changes

<h4>coherence-processingpattern</h4>

*   [Issue #171](https://github.com/coherence-community/coherence-incubator/issues/171):
    Added dependency on asp-api for coherence-pushreplicationpattern-web-example.

*   [Issue #168](https://github.com/coherence-community/coherence-incubator/issues/168):
    When there are multiple processing servers in a cluster, shutdown down one of them may cause task execution to hang.


--------------------------------------------------------------------------------

<h3>Version: 12.5.0 built on 2017-02-22</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   [Issue #165](https://github.com/coherence-community/coherence-incubator/issues/165):
    Updated pom.xml files to support publishing to Maven Central instead of maven.java.net

<h4>coherence-processingpattern</h4>

*   [Issue #49](https://github.com/coherence-community/coherence-incubator/issues/49):
    Resolved inappropriate use of CacheFactory.ensureCluster(), replacing with CacheFactory.getCluster().

*   [Issue #159](https://github.com/coherence-community/coherence-incubator/issues/159):
    Introduced ability to provide a ConfigurableCacheFactory when creating a ProcessingSession.

*   [Issue #160](https://github.com/coherence-community/coherence-incubator/issues/160):
    Ensure consistent use of ClassLoaders based on calling context.

*   [Issue #161](https://github.com/coherence-community/coherence-incubator/issues/161):
    Ensure Processing Pattern is initialized using the Cache Configuration LifecycleEvents.

*   [Issue #162](https://github.com/coherence-community/coherence-incubator/issues/162):
    Introduce Shared ExecutorService for internal background tasks.

*   [Issue #163](https://github.com/coherence-community/coherence-incubator/issues/163):
    Resolves fail-over/fail-back of Grid-based Tasks.


--------------------------------------------------------------------------------

<h3>Version: 12.4.0 built on 2017-09-28</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   [Issue #150](https://github.com/coherence-community/coherence-incubator/issues/150): Upgraded to require
    Java 7 and Java 8.

    Deployed Modules are built against and require Java 7.

    Integration Test Modules are built against and require Java 8.

*   [Issue #151](https://github.com/coherence-community/coherence-incubator/issues/151): Upgraded the following
    dependencies.

    EasyMock 3.1 to 3.4
    PowerMock 1.4.12 to 1.6.5
    JUnit 4.10 to 4.12
    CGLIB 2.2.2 to 3.2.2
    Mockito 1.9.0 to 1.10.19

<h4>coherence-processingpattern</h4>

*   [Issue #151](https://github.com/coherence-community/coherence-incubator/issues/151): Refactored the use
    of EasyMock for the latest version.

<h4>coherence-eventdistributionpattern</h4>

*   [Issue #156](https://github.com/coherence-community/coherence-incubator/issues/156): Event Channels may
    transition to "paused" state when encountering an Entry without meta-data, which may be caused by attempting
    to remove a non-existent entry.   Such requests will log a warning and will be ignored.

--------------------------------------------------------------------------------

<h3>Version: 12.3.2 built on 2016-06-29 10:05</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver
*   Jonathan Knight
*   Jan Vissers

<h4>Global and Cross-Module Changes</h4>

*   [Issue #125](https://github.com/coherence-community/coherence-incubator/issues/125): Replaced use of
    deprecated DeferredAssert.assertThat(...) methods with Eventually.assertThat(...)

*   [Issue #146](https://github.com/coherence-community/coherence-incubator/issues/146): Corrected use of
    &lt;connect-timeout&gt; configuration elements for Coherence 12.1.2+.

<h4>coherence-eventdistributionpattern</h4>

*   [Issue #140](https://github.com/coherence-community/coherence-incubator/issues/140): Optimized (by avoiding)
    Event Distribution when all Event Channels are disabled.

*   [Issue #144](https://github.com/coherence-community/coherence-incubator/issues/144): Introduced the
    ability to universally control all EventChannels for a single EventDistributor
    though the new EventDistributor JMX MBeans.

<h4>coherence-processingpattern</h4>

*   [Issue #143](https://github.com/coherence-community/coherence-incubator/issues/143): Resolved issue
    where the processing pattern cluster-config configuration elements aren't
    correctly included when using introduce-cache-config namespace.

<h4>coherence-eventdistributionpattern</h4>

*   [Issue #149](https://github.com/coherence-community/coherence-incubator/issues/149): Resolved issue where
    an Event Channel (controller) may remain in WAITING or DELAYING state when
    there are pending Events to send.

<h4>coherence-pushreplicationpattern</h4>

*   [Issue #36](https://github.com/coherence-community/coherence-incubator/issues/36): Fixed an issue where keys
    of replicated entries were being deserialized on the receiving cluster during
    replication.

*   [Issue #149](https://github.com/coherence-community/coherence-incubator/issues/149): Resolved issue where
    an Push Replication Event Channels may remain in WAITING or DELAYING state when
    there are pending Events to send.

--------------------------------------------------------------------------------

<h3>Version 12.3.1 built on 2015-08-06 17:28</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   [Issue #125](https://github.com/coherence-community/coherence-incubator/issues/125): Upgraded to use Oracle Tools 2.0.0-RC9

*   [Issue #142](https://github.com/coherence-community/coherence-incubator/issues/142): Upgraded to use Coherence 12.1.2-0-4
    (and certified with Coherence 12.1.3-0-2)

<h4>coherence-processingpattern</h4>

*   [Issue #132](https://github.com/coherence-community/coherence-incubator/issues/132): Removed use of Coherence internal calls
    (Base.checkNotNull(...)) to ensure that the pattern works across different versions of Coherence.

*   [Issue #137](https://github.com/coherence-community/coherence-incubator/issues/137): Repair processing-pattern configuration files
    (fails validation when enforced)

<h4>coherence-pushreplicationpattern</h4>

*   [Issue #136](https://github.com/coherence-community/coherence-incubator/issues/136): Removed duplicate definition of
    Coherence*Web dependency.

*   [Issue #141](https://github.com/coherence-community/coherence-incubator/issues/141): Resolved ClassCastException
    experienced with Coherence 12.1.2-0-3.


--------------------------------------------------------------------------------

<h3>Version: 12.3.0 built on 2014-12-10 11:21</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver, Tim Middleton

<h4>Global and Cross-Module Changes</h4>

*   [Issue #95](https://github.com/coherence-community/coherence-incubator/issues/95): Upgraded to require Java 7

*   [Issue #99](https://github.com/coherence-community/coherence-incubator/issues/99): Upgraded to use Coherence 12.1.2-0-3

*   [Issue #109](https://github.com/coherence-community/coherence-incubator/issues/109): Certified against Coherence 12.1.3.

*   [Issue #125](https://github.com/coherence-community/coherence-incubator/issues/125): Upgraded to use Oracle Tools 2.0.0

<h4>coherence-common</h4>

*   [Issue #124](https://github.com/coherence-community/coherence-incubator/issues/124): Introduced the ability
    to determine if a FiniteStateMachine is still accepting Events to process
    while performing an StateEntry/StateExit/Transaction Acton through
    the use of the new ExecutionContext.isAcceptingEvents() method.

*   [Issue #126](https://github.com/coherence-community/coherence-incubator/issues/126): Added support for
    merging &lt;defaults&gt; elements in a Coherence Cache Configuration
    when using the XmlPreprocessingNamespaceHandler (aka: introduce-cache-config)

*   [Issue #128](https://github.com/coherence-community/coherence-incubator/issues/128): Removed the dependency
    on CGLib from the pom.xml file as the code does not actually have a
    dependency on CGLib.

*   [Issue #129](https://github.com/coherence-community/coherence-incubator/issues/129): Removed unnecessary
    Coherence ConfigurableCacheFactory functional test.  These have been part
    of core Coherence functional tests since 3.7.1.

<h4>coherence-messagingpattern</h4>

*   [Issue #118](https://github.com/coherence-community/coherence-incubator/issues/118): Introduced
    JMX-based diagnostics for Susbcriptions.  This includes the ability to
    display the internal state of a Subscription.

*   [Issue #121](https://github.com/coherence-community/coherence-incubator/issues/121): Resolved
    potential message leaks when publishing to disabled subscriptions
    (subscriptions won't recieve messages, but messages may be left
    unacknowledged)

<h4>coherence-eventdistributionpattern</h4>

*   [Issue #106](https://github.com/coherence-community/coherence-incubator/issues/106): Added missing @OnArrived
    and @OnDeparting annotations to the CoherenceEventChannelSubscription and
    JMSEventChannelControllerConfiguration LiveObjects to ensure correct event distribution
    and push replication recovery during fail-over/fail-back/scale-out/scale-down.

*   [Issue #108](https://github.com/coherence-community/coherence-incubator/issues/108): Resolved ability
    to distribute and replicate Cache Entry expiry timeouts between clusters.

    This includes introducing the ability to customize expiry when during
    conflict resolution.

*   [Issue #110](https://github.com/coherence-community/coherence-incubator/issues/110): Introduced the
    ability to control batch-size, inter batch-distribution-delay and
    restart-delay using JMX at runtime.

*   [Issue #112](https://github.com/coherence-community/coherence-incubator/issues/112): Replaced the
    "message out of order" log when using Coherence-based event distribution
    implementations with something more apppropriate.  This log only
    indicates that a recovery is occuring (nothing bad!), because it's
    redistributing messages to an event channel that previously
    failed for some reason.

*   [Issue #115](https://github.com/coherence-community/coherence-incubator/issues/115): Refactored
    the "drain" functionality for Coherence-based event distribution
    implementations so that they use the configured batches and delays.

*   [Issue #120](https://github.com/coherence-community/coherence-incubator/issues/120): Introduced
    the ability to "propagate" a copy of a NamedCache over an associated
    EventChannel using a JMX operation.   This allows remote clusters
    to be "rebuilt" from another cluster or alternatively allows
    an EventChannel implementation to receive a entire copy of a
    NamedCache.

*   [Issue #128](https://github.com/coherence-community/coherence-incubator/issues/128): Correct the
    scope of the dependency on oracle-tools-core to make it test scope.

*   [Issue #133](https://github.com/coherence-community/coherence-incubator/issues/133): Corrected the
    choice of class loader when realizing Event Distribution Channels
    to prevent ClassNotFound exceptions when running in certain containers.

<h4>coherence-pushreplicationpattern</h4>

*   [Issue #64](https://github.com/coherence-community/coherence-incubator/issues/64):  Changed the
    coherence-web dependency to be "provided".

*   [Issue #120](https://github.com/coherence-community/coherence-incubator/issues/120): Introduced
    the ability to "propagate" a copy of a NamedCache over an associated
    EventChannel using a JMX operation.   This allows remote clusters
    to be "rebuilt" from another cluster or alternatively allows
    an EventChannel implementation to receive a entire copy of a
    NamedCache.

<h4>coherence-jvisualvm</h4>

*   [Issue #107](https://java.net/jira/browse/COHINC-107):  Memory Based Charts Should
    use bytes method.

*   Minor UI tweaks for Windows platforms.

<h4>coherence-incubator-site</h4>

*   [Issue #119](https://github.com/coherence-community/coherence-incubator/issues/119): Modifed pom.xml
    to produce and deploy the documentation to github in the "deploy" phase.


--------------------------------------------------------------------------------

<h3>Version 12.2.0 built on 2014-04-12 08:57</h3>

<h4>Source and Documentation Contributors</h4>

*   Jonathan Knight, Brian Oliver, Tim Middleton

<h4>Global and Cross-Module Changes</h4>

*   [Issue #81](https://github.com/coherence-community/coherence-incubator/issues/81): Upgraded to use Oracle Tools 1.2.2

*   [Issue #92](https://github.com/coherence-community/coherence-incubator/issues/92): Upgraded Maven Plugins.

<h4>coherence-incubator-all</h4>

*   [Issue #90](https://github.com/coherence-community/coherence-incubator/issues/90): (re)Introduced coherence-incubator-all
    distribution that contains all of the Incubator projects, as a single artifact.

<h4>coherence-common</h4>

*   [Issue #85](https://github.com/coherence-community/coherence-incubator/issues/85): Improved Annotation-based
    FiniteStateMachine Models to allow for @Transitions defined by super-classes.

*   [Issue #87](https://github.com/coherence-community/coherence-incubator/issues/87): Introduced the ability to
    control whether a NonBlockingFiniteStateMachine autostarts (aka: transitions)
    to its initial state.

*   [Issue #89](https://github.com/coherence-community/coherence-incubator/issues/89): Refactored to use
    new Coherence 12.1.2-0-1 serializable configuration classes and removed
    internally defined classes.

*   [Issue #101](https://github.com/coherence-community/coherence-incubator/issues/101): Improved LiveObject test
    isolation.

<h4>coherence-commandpattern</h4>

*   [Issue #80](https://github.com/coherence-community/coherence-incubator/issues/80): Fixed methods in CommandExecutor
    annotated for use with the AnnotationDrivenModel so that they have the correct signature.

*   [Issue #100](https://github.com/coherence-community/coherence-incubator/issues/100): Resolved issue where
    Commands may not be executed after adding/removing cluster members.

<h4>coherence-commandpattern-tests</h4>

*   Introduced new functional tests module for the coherence-commandpattern.

<h4>coherence-messagingpattern-tests</h4>

*   [Issue #81](https://github.com/coherence-community/coherence-incubator/issues/81): Upgraded for Oracle Tools
    improvements.

*   [Issue #98](https://github.com/coherence-community/coherence-incubator/issues/98): Removed unnecessary code
    to clean up MessageEngine instances for Destinations upon successful Message
    delivery.   This could cause unnecessary creation of MessageEngines for the
    next Message on the Destination, including the allocation of a new
    Finite State Machine and associated Thread.

<h4>coherence-eventdistributionpattern</h4>

*   [Issue #83](https://github.com/coherence-community/coherence-incubator/issues/83): Refactored
    AbstractEventChannelController internals to use a Non-Blocking Finite State
    Machine, instead of Java Synchronization and an ExecutorService.

    Apart from simplifying the implementation, this enhancement permits the use of
    "coalescing events", which can help reduce CPU when message subscriptions
    are updated, causing numerous events triggering extraneous distribution requests.

*   [Issue #93](https://java.net/jira/browse/COHINC-93): Introduced new DELAYED
    state for the AbstractEventChannelController, together with a new "polling-delay"
    configuration for Event Channels.   This allows separate control of
    polling and inter-batch delays.

*   [Issue #102](https://java.net/jira/browse/COHINC-102): Corrected
    &lt;cachestore-scheme&gt; documentation (and implementation).  Such schemes
    must use the namespace.  Standard Coherence cachestore-scheme xml elements are
    not supported directly.

*   [Issue #103](https://java.net/jira/browse/COHINC-103): Corrected the resolution
    of target/destinations caches when using a LocalCacheEventChannel.

*   [Issue #127](https://java.net/jira/browse/COHINC-127): Corrected expiry-time
    calculation to ensure that "loaded" BinaryEntries can be sent over an
    EventChannel without loss of fidelity.  This allows LocalCacheEventChannels
    to correctly update Entries with the required expiry time.

<h4>coherence-pushreplicationpattern-tests</h4>

*   [Issue #11](https://github.com/coherence-community/coherence-incubator/issues/11):  Refactored
    Push Replication Functional Tests into their own module.

<h4>coherence-jvisualvm</h4>

*   [Issue #79](https://github.com/coherence-community/coherence-incubator/issues/79): JVisualVM Plugin
    Does not Report Cache Storage Details when connected to 3.6 and earlier cluster.

*   [Issue #84](https://github.com/coherence-community/coherence-incubator/issues/84): VisualVMModel
    generalDataArea should not be editable.

*   [Issue #91](https://github.com/coherence-community/coherence-incubator/issues/91): Jvisualvm Plugin
    Incorrectly Reports Session Counts for Multiple Coh*web Apps.

*   [Issue #96](https://java.net/jira/browse/COHINC-96): Corrected labels on the
    Packet Publisher and Receiver Graphs.

*   [Issue #97](https://java.net/jira/browse/COHINC-97): Corrected Cache Size
    metrics that failed to take the configured unit-calculator into account.

*   [Issue #105](https://java.net/jira/browse/COHINC-105): Add Cluster Name and
    Version to "Cluster Information" Header


--------------------------------------------------------------------------------

<h3>Version: 12.1.0 built on 2013-12-05 15:16</h3>

<h4>Source and Documentation Contributors</h4>

*   Tim Middleton, Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   [Issue #74](https://github.com/coherence-community/coherence-incubator/issues/74): Upgraded projects to use
    Oracle Tools 1.1.0

*   [Issue #75](https://github.com/coherence-community/coherence-incubator/issues/75): Upgraded projects to use
    Oracle Coherence 12.1.2-0-1

<h4>coherence-incubator-site (Documentation)</h4>

*   No Changes

<h4>coherence-common</h4>

*   No Changes

<h4>coherence-commandpattern-examples</h4>

*   No Changes

<h4>coherence-functorpattern</h4>

*   No Changes

<h4>coherence-functorpattern-examples</h4>

*   No Changes

<h4>coherence-processingpattern-examples</h4>

*   No Changes

<h4>coherence-processingpattern-examples</h4>

*   [Issue #82](https://github.com/coherence-community/coherence-incubator/issues/82): Resolved an issue in the Processing Pattern
    Web Examples Tests where the FunctionalTest could fail due to the storage nodes and web server
    failing to form a cluster.

<h4>coherence-messagingpattern</h4>

*   No Changes

<h4>coherence-eventdistributionpattern</h4>

*   [Issue #71](https://github.com/coherence-community/coherence-incubator/issues/71): Introduce the ability to
    filter events  prior to queuing them for distribution.  This resolves
    unnecessary queuing of events to be published when we know they will never
    be published.  eg: when using certain HUB and SPOKE or CENTRALIZED
    topologies.

*   [Issue #73](https://github.com/coherence-community/coherence-incubator/issues/73): Resolves an issue where
    the Event Optimizing Transformer may cause NPE with certain topologies.

<h4>coherence-pushreplicationpattern</h4>

*   [Issue #71](https://github.com/coherence-community/coherence-incubator/issues/71): Introduce the ability to
    filter events  prior to queuing them for distribution.  This resolves
    unnecessary queuing of events to be published when we know they will never
    be published.  eg: when using certain HUB and SPOKE or CENTRALIZED
    topologies.

*   [Issue #73](https://github.com/coherence-community/coherence-incubator/issues/73): Resolves an issue where
    the Event Optimizing Transformer may cause NPE with certain topologies.

<h4>coherence-pushreplicationpattern-examples</h4>

*   No Changes

<h4>coherence-pushreplicationpattern-web-example</h4>

*   No Changes

<h4>coherence-jvisualvm</h4>

*   Introduced the Coherence JVisualVm Plug-in.


--------------------------------------------------------------------------------

<h3>Version 12.0.0 built on 2013-09-09 08:54</h3>

<h4>Source and Documentation Contributors</h4>

*   Noah Arliss, Brian Oliver, Paul Mackin, David Rowlands

<h4>Global and Cross-Module Changes</h4>

*   Upgraded projects to use Oracle Coherence 12.1.2-0-0

*   Updated all configuration files to use the latest configuration namespaces.
    Importantly previous namespace handler implementations remain and are fully
    operational.  They are simply deprecated in favor of the new implementations.

<h4>coherence-incubator-site (Documentation)</h4>

*   Updated the documentation to reflect support for Oracle Coherence 12.1.2-0-0

<h4>coherence-common</h4>

*   Removed the following packages, classes and interfaces:

    `com.oracle.coherence.common.applications` - now available in Oracle Tools.
    `com.oracle.coherence.common.backingmaplisteners` - use Coherence 12.1.2 Live Events instead.
    `com.oracle.coherence.common.builders` - use Coherence 12.1.2 configuration model instead.
    `com.oracle.coherence.common.configuration` - use Coherence 12.1.2 configuration model instead.
    `com.oracle.coherence.common.events` - all but interfaces for Event Distribution removed.
    `com.oracle.coherence.common.logging` - all but CoherenceLogHandler removed.
    `com.oracle.coherence.common.network` - now available in Oracle Tools.
    `com.oracle.coherence.common.runtime` - now available in Oracle Tools.
    `com.oracle.coherence.common.serialization` - use Coherence 12.1.2 serialization annotations instead.
    `com.oracle.coherence.configuration` - use Coherence 12.1.2 configuration model instead.
    `com.oracle.coherence.environment` - use Coherence 12.1.2 configuration model instead.

*   Introduced the `com.oracle.coherence.common.liveobjects` package to encapsulate
    the new implementation of Live Objects (this will soon become an independent pattern)

*   Introduced the `com.oracle.coherence.common.namespace` package to encapsulate
    the new custom namespace handler implementations for Coherence 12.1.2

*   Removed the `InstanceNamespaceContentHandler` (instance) and `ValueNamespaceContentHandler` (value)
    namespace handlers.  These are no longer required as regular Coherence 12.1.2 <instance> elements
    can be used.  These we deprecated in Incubator 11.

<h4>coherence-commandpattern</h4>

*   Refactored to use Live Events instead of Backing Map Listeners.  This included
    changing the internal cache configuration used for the pattern.

*   Refactored to use internally use Non-Blocking-Finite-State Machines instead
    of hand-crafted states and thread synchronization.

<h4>coherence-commandpattern-examples</h4>

*   No Changes

<h4>coherence-functorpattern</h4>

*   Refactored to use Live Events instead of Backing Map Listeners.  This included
    changing the internal cache configuration used for the pattern.

<h4>coherence-functorpattern-examples</h4>

*   No Changes

<h4>coherence-processingpattern</h4>

*   Refactored to use Live Events instead of Backing Map Listeners.  This included
    changing the internal cache configuration used for the pattern.

*   Refactored to the configuration to use the extensible namespace feature
    of Oracle Coherence 12.1.2.

<h4>coherence-processingpattern-examples</h4>

*   No Changes

<h4>coherence-messagingpattern</h4>

*   Refactored to use Live Events instead of Backing Map Listeners.  This included
    changing the internal cache configuration used for the pattern.

*   Refactored to use java.util.Logging.

*   Refactored to use internally use Non-Blocking-Finite-State Machines instead
    of hand-crafted states and thread synchronization.

<h4>coherence-eventdistributionpattern</h4>

*   Refactored to use Live Events instead of Backing Map Listeners.  This included
    changing the internal cache configuration used for the pattern.

*   Refactored to the configuration to use the extensible namespace feature
    of Oracle Coherence 12.1.2.

<h4>coherence-pushreplicationpattern</h4>

*   [Issue #65](https://github.com/coherence-community/coherence-incubator/issues/65): Resolved issue
    where attempting to remove non-existing or expired entries would not
    be replicated.

<h4>coherence-pushreplicationpattern-examples</h4>

*   No Changes

<h4>coherence-pushreplicationpattern-web-example</h4>

*   No Changes
